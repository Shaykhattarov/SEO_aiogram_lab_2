import keyboards as kb

from config import token
from tests import read_file
from aiogram import Bot, Dispatcher, executor, types

bot = Bot(token=token)
dp = Dispatcher(bot)


@dp.message_handler(commands=['start'])
async def start_message(message: types.Message):
    global question_amount
    await message.answer(text='–ü—Ä–∏–≤–µ—Ç!', reply_markup=kb.inline_start_kb)
    if question_amount == 0:
        await message.answer(text='–£ –Ω–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ç–µ—Å—Ç–æ–≤ –¥–ª—è —Ç–µ–±—è :(')


@dp.callback_query_handler(lambda c: c.data == "start_button" or c.data == "next_question")
async def send_question(call: types.CallbackQuery):
    global question_counter
    await bot.answer_callback_query(call.id)
    if question_counter <= len(data):
        question = f"–í–æ–ø—Ä–æ—Å ‚Ññ{question_counter + 1}: \n{data[question_counter]['question']}"
        await bot.send_message(call.from_user.id, text=question)
        question_counter += 1
    return


@dp.message_handler()
async def get_answer_from_user(message: types.Message):
    global user_answers
    global question_counter, question_amount
    user_answers.append(message.text)
    answer = f"–í–∞—à –æ—Ç–≤–µ—Ç: \n{message.text}"
    if question_counter != question_amount:
        await message.answer(text=answer, reply_markup=kb.inline_next_question_kb)
    else:
        await message.answer(text=answer, reply_markup=kb.inline_check_answers_kb)


@dp.callback_query_handler(lambda c: c.data == 'check_answers')
async def check_answers(call: types.CallbackQuery):
    global question_amount, user_answers
    await bot.answer_callback_query(call.id)
    true_answers = 0
    results = "–í–æ—Ç —Ç–≤–æ–∏ –æ—Ç–≤–µ—Ç—ã: \n"
    for num, answer in enumerate(user_answers):
        if answer == data[num]['answer']:
            results += f"  {num + 1}: {answer} ‚úÖ \n"
            true_answers += 1
        else:
            results += f"  {num + 1}: {answer} ‚ùå \n"
    hundred_scale = int((true_answers / question_amount) * 100)
    if hundred_scale <= 40:
        complement = '–¢—ã –±–æ–ª—å—à–æ–π –º–æ–ª–æ–¥–µ—Ü! –ù–æ –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ :)'
    elif hundred_scale <= 70:
        complement = "–¢—ã –¥–æ–±–∏–ª—Å—è —Ö–æ—Ä–æ—à–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞. –¢–∞–∫ –¥–µ—Ä–∂–∞—Ç—å!"
    else:
        complement = "–¢—ã —É–º–∏–Ω—á–∫–∞! –ü—Ä–æ–¥–æ–ª–∂–∞–π –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µüòâ"
    results += f"–û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {hundred_scale} –∏–∑ 100.\n{complement}"
    await bot.send_message(call.from_user.id, text=results)


if __name__ == "__main__":
    print("[INFO] –°—Ç–∞—Ä—Ç")
    data = read_file()  # —Å–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ –æ—Ç–≤–µ—Ç–æ–≤
    question_amount = len(data)
    question_counter = 0  # —Å—á–µ—Ç—á–∏–∫ –≤–æ–ø—Ä–æ—Å–æ–≤
    user_answers = []
    print("[INFO] –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã executor")
    executor.start_polling(dp, skip_updates=True)
